openapi: 3.0.0
info:
  title: Dealpath Developer API
  description: Comprehensive information for integrating with our API endpoints.
  version: '1.3'
  contact:
    name: Dealpath
    url: https://dealpath.zendesk.com/hc/en-us
    email: support@dealpath.com
servers:
  - url: https://api.dealpath.com
security:
  - bearerAuth: []
tags:
  - name: Assets
    description: Asset operations
  - name: Deals
    description: Deal operations
  - name: Field Definitions
    description: Field definition operations
  - name: Fields
    description: Field operations
  - name: Files
    description: Files operations
  - name: Folders
    description: Folder operations
  - name: Investments
    description: Investment operations
  - name: Leases
    description: Lease operations
  - name: List Option
    description: List Option operations
  - name: Loans
    description: Loan operations
  - name: People
    description: People operations
  - name: Properties
    description: Property operations
  - name: Roles
    description: Roles operations
  - name: Search
    description: Search operations
  - name: Workflow
    description: Workflow operations
paths:
  /asset:
    post:
      operationId: createAsset
      summary: Creates and returns a new asset.
      tags:
        - Assets
      description: This endpoint takes in parameters from the body of the post request and returns a nested object. The outer object has one key `asset_create` that is an object that contains two keys - `data` and `next_token`. The `data` object contains the newly created asset object and the `next_token` will be null.
      requestBody:
        required: true
        description: Asset object that will be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
                asset_type_list_option_id:
                  type: integer
                property_ids:
                  type: array
                  items:
                    type: integer
                    minItems: 1
              required:
                - name
                - asset_type_list_option_id
                - property_ids
      responses:
        '200':
          description: A JSON blob with asset data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  asset_create:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/asset'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /asset/{asset_id}:
    put:
      operationId: updateAssetById
      summary: Updates an asset and returns it.
      tags:
        - Assets
      description: This endpoint returns a nested object. The outer object has one key `asset_update` that is an object that contains two keys - `data` and `next_token`. The data object contains a single asset object, and the `next_token` will be null.
      parameters:
        - in: path
          name: asset_id
          description: The ID of an asset.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: Asset object that will be updated.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
      responses:
        '200':
          description: A JSON blob with asset data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  asset_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/asset'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteAssetById
      summary: Deletes an asset and returns its ID.
      tags:
        - Assets
      description: This endpoint returns a nested object. The outer object has one key `asset_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains the ID of the asset that has been deleted, and the `next_token` will be null.
      parameters:
        - in: path
          name: asset_id
          description: The ID of an asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified asset will actually be deleted.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON blob with asset data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  asset_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /assets:
    get:
      operationId: getAssets
      summary: Returns a paginated list of assets.
      tags:
        - Assets
      description: This endpoint returns a nested object. The outer object is assets and contains two keys - data and next_token. The data object contains an array of asset objects, and the next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: query
          name: asset_ids
          description: 'Restricts the response to only include assets that match the user-specified set of ids. Note: this parameter is mutually exclusive with the property_ids and loan_ids parameters. Providing more than one of these parameters will return no results.'
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: property_ids
          description: 'Restricts the response to only include assets that are associated with the user-specified set of properties. Note: this parameter is mutually exclusive with the asset_ids and loan_ids parameters. Providing more than one of these parameters will return no results.'
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: loan_ids
          description: 'Restricts the response to only include assets that are associated with the user-specified set of loans. Note: this parameter is mutually exclusive with the asset_ids and property_ids parameters. Providing more than one of these parameters will return no results.'
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: updated_before
          description: Restricts the response to only include assets that have a last updated value before a certain timestamp. Parameter value is expected to be a Unix integer timestamp.
          required: false
          schema:
            type: integer
        - in: query
          name: updated_after
          description: Restricts the response to only include assets that have a last updated value after a certain timestamp. Parameter value is expected to be a Unix integer timestamp.
          required: false
          schema:
            type: integer
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of assets
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  assets:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/asset'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /deal:
    post:
      operationId: createDeal
      summary: Creates and returns a new deal.
      tags:
        - Deals
      description: This endpoint takes in parameters from the body of the post request and returns a nested object. The outer object has one key `deal_create` that is an object that contains two keys - `data` and `next_token`. The `data` object contains the newly created deal object and the `next_token` will be null.
      requestBody:
        required: true
        description: Deal object that will be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
                deal_type_id:
                  type: integer
                property_id:
                  type: integer
              required:
                - name
                - deal_type_id
                - property_id
      responses:
        '200':
          description: A JSON blob with deal data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  deal_create:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/deal'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /deal/{deal_id}:
    get:
      operationId: getDealById
      summary: Returns a deal.
      tags:
        - Deals
      description: This endpoint returns a nested object. The outer object has one key `deal` that is an object that contains two keys - `data` and `next_token`. The data object contains a single deal object, and the `next_token` will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of a deal.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON blob with deal data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  deal:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/deal'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      operationId: updateDealById
      summary: Updates a deal and returns it.
      tags:
        - Deals
      description: This endpoint returns a nested object. The outer object has one key `deal_update` that is an object that contains two keys - `data` and `next_token`. The data object contains a single deal object, and the `next_token` will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of a deal.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: Deal object that will be updated.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
      responses:
        '200':
          description: A JSON blob with deal data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  deal_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/deal'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteDealById
      summary: Deletes a deal and returns its ID.
      tags:
        - Deals
      description: This endpoint returns a nested object. The outer object has one key `deal_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains the ID of the deal that has been deleted, and the `next_token` will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of a deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified deal will actually be deleted.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON blob with deal data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  deal_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /deals:
    get:
      operationId: getDeals
      summary: Returns a paginated list of deals.
      tags:
        - Deals
      description: This endpoint returns a nested object. The outer object is deals and contains two keys - data and next_token. The data object contains an array of deal objects, and the next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: query
          name: property_ids
          description: Restricts the response to only include deals that are associated with the user-specified set of properties.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: investment_ids
          description: Restricts the response to only include deals that are associated with the user-specified set of investments.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: updated_before
          description: Restricts the response to only include deals that have a last updated value before a certain timestamp. Parameter value is expected to be a Unix integer timestamp.
          required: false
          schema:
            type: integer
        - in: query
          name: updated_after
          description: Restricts the response to only include deals that have a last updated value after a certain timestamp. Parameter value is expected to be a Unix integer timestamp.
          required: false
          schema:
            type: integer
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of deals
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  deals:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/deal'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /investment:
    post:
      operationId: createInvestment
      summary: Creates and returns a new investment.
      tags:
        - Investments
      description: This endpoint takes in parameters from the body of the post request and returns a nested object. The outer object has one key `investment_create` that is an object that contains two keys - `data` and `next_token`. The `data` object contains the newly created investment object and the `next_token` will be null.
      requestBody:
        required: true
        description: Investment object that will be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
                deal_ids:
                  type: array
                  items:
                    type: integer
                asset_ids:
                  type: array
                  items:
                    type: integer
                investment_type_list_option_id:
                  type: integer
              required:
                - name
                - investment_type_list_option_id
      responses:
        '200':
          description: A JSON blob with investment data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  investment_create:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/investment'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /investment/{investment_id}:
    put:
      operationId: updateInvestmentById
      summary: Updates and returns an investment.
      tags:
        - Investments
      description: This endpoint takes in parameters from the body of the put request and returns a nested object. The outer object has one key `investment_update` that is an object that contains two keys - `data` and `next_token`. The `data` object contains the updated investment object and the `next_token` will be null.
      parameters:
        - in: path
          name: investment_id
          description: The ID of the investment to update.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: Investment object that will be updated.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
              required:
                - name
      responses:
        '200':
          description: A JSON blob with investment data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  investment_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/investment'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /investments:
    get:
      operationId: getInvestments
      summary: Returns a paginated list of investments.
      tags:
        - Investments
      description: This endpoint returns a nested object. The outer object is investments and contains two keys - data and next_token. The data object contains an array of investment objects, and the next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: query
          name: investment_ids
          description: Restricts the response to only include investments that are associated with the user-specified set of investment ids.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: deal_ids
          description: Restricts the response to only include investments that are associated with the user-specified set of deal ids.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: asset_ids
          description: Restricts the response to only include investments that are associated with the user-specified set of asset ids.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: updated_before
          description: Restricts the response to only include investments that have a last updated value before a certain timestamp. Parameter value is expected to be a Unix integer timestamp.
          required: false
          schema:
            type: integer
        - in: query
          name: updated_after
          description: Restricts the response to only include investments that have a last updated value after a certain timestamp. Parameter value is expected to be a Unix integer timestamp.
          required: false
          schema:
            type: integer
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of investments
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  investments:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/investment'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /attachment/investment/{investment_id}/deal/{deal_id}:
    post:
      operationId: createInvestmentToDealAttachment
      summary: Attaches a deal to an investment
      tags:
        - Investments
      description: This endpoint attaches a deal to an investment. It returns a nested object. The outer object is `attachment_create` and it contains two keys - `data` and `next_token`. The `data` object contains the id's of the investment and deal, and the `next_token` will be null.
      parameters:
        - in: path
          name: investment_id
          description: The ID of the investment.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON blob with the id's of the investment and deal.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  attachment_create:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          investment_id:
                            type: integer
                          deal_id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteInvestmentToDealAttachment
      summary: Detaches a deal from an investment
      tags:
        - Investments
      description: This endpoint detaches a deal from an investment. It returns a nested object. The outer object is `attachment_delete` and it contains two keys - `data` and `next_token`. The `data` object contains the id's of the investment and deal, and the `next_token` will be null.
      parameters:
        - in: path
          name: investment_id
          description: The ID of the investment.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified deal will actually be detached from the investment.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON blob with the id's of the investment and deal.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  attachment_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          investment_id:
                            type: integer
                          deal_id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /property:
    post:
      operationId: createProperty
      summary: Creates and returns a new property.
      tags:
        - Properties
      description: This endpoint takes in parameters from the body of the post request and returns a nested object. The outer object has one key `property_create` that is an object that contains two keys - `data` and `next_token`. The `data` object contains the newly created property object and the `next_token` will be null.
      requestBody:
        required: true
        description: Property object that will be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
                property_type_list_option_id:
                  type: integer
                address:
                  $ref: '#/components/schemas/address'
              required:
                - address
      responses:
        '200':
          description: A JSON blob with property data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  property_create:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/property'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /property/{property_id}:
    get:
      operationId: getPropertyById
      summary: Returns a property.
      tags:
        - Properties
      description: This endpoint returns a nested object. The outer object is property and contains two keys - data and next_token. The data object contains a single property object, and the next_token will be null.
      parameters:
        - in: path
          name: property_id
          description: The ID of a property.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON blob with property data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  property:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/property'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      operationId: updatePropertyById
      summary: Updates a property and returns it.
      tags:
        - Properties
      description: This endpoint returns a nested object. The outer object has one key `property_update` that is an object that contains two keys - `data` and `next_token`. The data object contains a single deal object, and the `next_token` will be null.
      parameters:
        - in: path
          name: property_id
          description: The ID of a property.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: Property object that will be updated. Specified fields will be updated. Fields with values set value to 'null' will be cleared.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
                address:
                  $ref: '#/components/schemas/address'
      responses:
        '200':
          description: A JSON blob with property data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  property_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/property'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deletePropertyById
      summary: Deletes a property and returns its ID.
      tags:
        - Properties
      description: This endpoint returns a nested object. The outer object has one key `property_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains the ID of the property that has been deleted, and the `next_token` will be null. If the specified property is the last property associated with a deal or asset, the deletion will not proceed, and an error will be returned.
      parameters:
        - in: path
          name: property_id
          description: The ID of a property.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified property will actually be deleted.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON blob with property data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  property_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /properties:
    get:
      operationId: getProperties
      summary: Returns a paginated list of properties.
      tags:
        - Properties
      description: This endpoint returns a nested object. The outer object is properties and contains two keys - data and next_token. The data object contains an array of property objects, and the next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: query
          name: deal_ids
          description: Restricts the response to only include properties that are associated with the user-specified set of deals.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: updated_before
          description: Restricts the response to only include properties that have a last updated value before a certain timestamp. Parameter value is expected to be a Unix integer timestamp.
          required: false
          schema:
            type: integer
        - in: query
          name: updated_after
          description: Restricts the response to only include properties that have a last updated value after a certain timestamp. Parameter value is expected to be a Unix integer timestamp.
          required: false
          schema:
            type: integer
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of properties
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  properties:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/property'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /attachment/deal/{deal_id}/property/{property_id}:
    post:
      operationId: createPropertyToDealAttachment
      summary: Attaches a property to a deal
      tags:
        - Properties
      description: This endpoint attaches a property a deal. It returns a nested object. The outer object is `attachment_create` and it contains two keys - `data` and `next_token`. The `data` object contains the id's of the deal and property, and the `next_token` will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: property_id
          description: The ID of the property.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON array of properties
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  attachment_create:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deal_id:
                            type: integer
                          property_id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deletePropertyToDealAttachment
      summary: Detaches a property from a deal
      tags:
        - Properties
      description: This endpoint detaches a property from a deal. It returns a nested object. The outer object is `attachment_delete` and it contains two keys - `data` and `next_token`. The `data` object contains the id's of the deal and property, and the `next_token` will be null. If the specified attachment is the last property associated with a deal, the detachment will not proceed, and an error will be returned.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: property_id
          description: The ID of the property.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified property will actually be detached from the deal.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON array of properties
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  attachment_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deal_id:
                            type: integer
                          property_id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /attachment/asset/{asset_id}/property/{property_id}:
    post:
      operationId: createPropertyToAssetAttachment
      summary: Attaches a property to an asset
      tags:
        - Properties
      description: This endpoint attaches a property an asset. It returns a nested object. The outer object is `attachment_create` and it contains two keys - `data` and `next_token`. The `data` object contains the id's of the asset and property, and the `next_token` will be null.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: property_id
          description: The ID of the property.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON array of properties
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  attachment_create:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          asset_id:
                            type: integer
                          property_id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deletePropertyToAssetAttachment
      summary: Detaches a property from an asset
      tags:
        - Properties
      description: This endpoint detaches a property from an asset. It returns a nested object. The outer object is `attachment_delete` and it contains two keys - `data` and `next_token`. The `data` object contains the id's of the asset and property, and the `next_token` will be null. If the specified attachment is the last property associated with an asset, the detachment will not proceed, and an error will be returned.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: property_id
          description: The ID of the property.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified property will actually be detached from the asset.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON array of properties
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  attachment_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          asset_id:
                            type: integer
                          property_id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /attachment/loan/{loan_id}/property/{property_id}:
    post:
      operationId: createPropertyToLoanAttachment
      summary: Attaches a property to a loan
      tags:
        - Properties
      description: This endpoint attaches a property a loan. It returns a nested object. The outer object is `attachment_create` and it contains two keys - `data` and `next_token`. The `data` object contains the id's of the loan and property, and the `next_token` will be null.
      parameters:
        - in: path
          name: loan_id
          description: The ID of the loan.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: property_id
          description: The ID of the property.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON array of properties
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  attachment_create:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          loan_id:
                            type: integer
                          property_id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deletePropertyToLoanAttachment
      summary: Detaches a property from a loan
      tags:
        - Properties
      description: This endpoint detaches a property from a loan. It returns a nested object. The outer object is `attachment_delete` and it contains two keys - `data` and `next_token`. The `data` object contains the id's of the loan and property, and the `next_token` will be null.
      parameters:
        - in: path
          name: loan_id
          description: The ID of the loan.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: property_id
          description: The ID of the property.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified property will actually be detached from the loan.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON array of properties
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  attachment_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          loan_id:
                            type: integer
                          property_id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /list_options/field_definition/{field_definition_id}:
    get:
      operationId: getListOptionsByFieldDefinitionId
      summary: Get all of the options available for a list field.
      tags:
        - List Option
      description: Get all of the options available for a list field. This endpoint is necessary to look up which deal type IDs to use with a deal create POST request.
      parameters:
        - in: path
          name: field_definition_id
          description: The ID of a field definition.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON array of list option field definitions
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  list_options:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/list_option'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /list_option/{list_option_id}:
    put:
      operationId: updateListOptionById
      summary: Updates a list option and returns it.
      tags:
        - List Option
      description: This endpoint returns a nested object. The outer object has one key `list_option_update` that is an object that contains two keys - `data` and `next_token`. The data object contains a single list option object, and the `next_token` will be null.
      parameters:
        - in: path
          name: list_option_id
          description: The ID of a list option.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        description: List option object that will be updated. Specified fields will be updated.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 200
                disabled:
                  type: boolean
                  example: false
      responses:
        '200':
          description: A JSON blob with list option data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  list_option_create:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/list_option'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteListOptionById
      summary: Deletes a list option and returns its ID.
      tags:
        - List Option
      description: This endpoint returns a nested object. The outer object has one key `list_option_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains the ID of the list option that has been deleted, and the `next_token` will be null.
      parameters:
        - in: path
          name: list_option_id
          description: The ID of a list option.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified list option will actually be deleted.
          required: true
          schema:
            type: boolean
            example: true
        - in: query
          name: transfer_list_option_id
          description: The ID of the list option that will replace the value of any fields currently set to the value of the deleted list option.
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON blob with list option id that was deleted.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  list_option_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /list_option/field_definition/{field_definition_id}:
    post:
      operationId: createListOption
      summary: Creates and returns a new list option.
      tags:
        - List Option
      description: This endpoint takes in parameters from the body of the post request and returns a nested object. The outer object has one key `list_option_create` that is an object that contains two keys - `data` and `next_token`. The `data` object contains the newly created list option object and the `next_token` will be null.
      parameters:
        - in: path
          name: field_definition_id
          description: The ID of a field definition.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        description: List option object that will be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                list_option_name:
                  type: string
                  maxLength: 200
                disabled:
                  type: boolean
                  default: false
              required:
                - list_option_name
      responses:
        '200':
          description: A JSON blob with list option data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  list_option_create:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/list_option'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /loan:
    post:
      operationId: createLoan
      summary: Creates and returns a new loan.
      tags:
        - Loans
      description: This endpoint takes in parameters from the body of the post request and returns a nested object. The outer object has one key `loan_create` that is an object that contains two keys - `data` and `next_token`. The `data` object contains the newly created loan object and the `next_token` will be null.
      requestBody:
        required: true
        description: Loan object that will be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
                deal_id:
                  type: integer
                asset_id:
                  type: integer
                loan_type_list_option_id:
                  type: integer
                loan_status_list_option_id:
                  type: integer
              required:
                - name
                - loan_type_list_option_id
                - loan_status_list_option_id
      responses:
        '200':
          description: A JSON blob with loan data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  loan_create:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/loan'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /lease:
    post:
      operationId: createLease
      summary: Creates and returns a new lease.
      tags:
        - Leases
      description: This endpoint takes in parameters from the body of the post request and returns a nested object. The outer object has one key `lease_create` that is an object that contains two keys - `data` and `next_token`. The `data` object contains the newly created lease object and the `next_token` will be null.
      requestBody:
        required: true
        description: Lease object that will be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                tenant_name:
                  type: string
                  maxLength: 64
                property_id:
                  type: integer
                begin_date:
                  type: string
                  format: date-time
                suite_id:
                  type: string
                  maxLength: 20
                leased_area:
                  type: integer
              required:
                - tenant_name
                - property_id
      responses:
        '200':
          description: A JSON blob with lease data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  lease_create:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/lease'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /loans:
    get:
      operationId: getLoans
      summary: Returns a paginated list of loans.
      tags:
        - Loans
      description: This endpoint returns a nested object. The outer object is loans and contains two keys - data and next_token. The data object contains an array of loan objects, and the next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: query
          name: loan_ids
          description: Restricts the response to only include user-specified loans.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: deal_ids
          description: Restricts the response to only include loans that are associated with the user-specified set of deals.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: asset_ids
          description: Restricts the response to only include loans that are associated with the user-specified set of assets.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: property_ids
          description: Restricts the response to only include loans that are associated with the user-specified set of properties.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: updated_before
          description: Restricts the response to only include loans that have a last updated value before a certain timestamp. Parameter value is expected to be a Unix integer timestamp.
          required: false
          schema:
            type: integer
        - in: query
          name: updated_after
          description: Restricts the response to only include loans that have a last updated value after a certain timestamp. Parameter value is expected to be a Unix integer timestamp.
          required: false
          schema:
            type: integer
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of loan objects.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  loans:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/loan'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /loan/{loan_id}:
    put:
      operationId: updateLoan
      summary: Updates and returns a new loan.
      tags:
        - Loans
      description: This endpoint takes in parameters from the body of the put request and returns a nested object. The outer object has one key `loan_update` that is an object that contains two keys - `data` and `next_token`. The `data` object contains the newly created loan object and the `next_token` will be null.
      parameters:
        - in: path
          name: loan_id
          description: The ID of a loan.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: Loan object that will be updated.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
                loan_type_list_option_id:
                  type: integer
                loan_status_list_option_id:
                  type: integer
      responses:
        '200':
          description: A JSON blob with loan data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  loan_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/loan'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteLoanById
      summary: Deletes a loan and returns its ID.
      tags:
        - Loans
      description: This endpoint returns a nested object. The outer object has one key `loan_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains the ID of the loan that has been deleted, and the `next_token` will be null.
      parameters:
        - in: path
          name: loan_id
          description: The ID of a loan.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified loan will actually be deleted.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON blob with deal data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  loan_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /attachment/deal/{deal_id}/loan/{loan_id}:
    put:
      operationId: updateLoanToDealAttachment
      summary: Attaches a loan to a deal.
      tags:
        - Loans
      description: This endpoint attaches a loan to a deal. It returns a nested object. The outer object is `attachment_update` and it contains two keys - `data` and `next_token`. The `data` object contains the id's of the loan and deal, and the `next_token` will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: loan_id
          description: The ID of the loan.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON blob with loan and deal ids
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  attachment_update:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          loan_id:
                            type: integer
                          deal_id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /attachment/asset/{asset_id}/loan/{loan_id}:
    put:
      operationId: updateLoanToAssetAttachment
      summary: Attaches a loan to an asset.
      tags:
        - Loans
      description: This endpoint attaches a loan to a asset. It returns a nested object. The outer object is `attachment_update` and it contains two keys - `data` and `next_token`. The `data` object contains the id's of the loan and asset, and the `next_token` will be null.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: loan_id
          description: The ID of the loan.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON blob with loan and asset ids
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  attachment_update:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          loan_id:
                            type: integer
                          asset_id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /field_definitions:
    get:
      operationId: getFieldDefinitions
      summary: Returns a paginated list of field definitions.
      tags:
        - Field Definitions
      description: This endpoint returns a nested object. The outer object is field_definitions and contains two keys - data and next_token. The data object contains an array of field definitions - each with a field id and name. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of field definitions
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  field_definitions:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - $ref: '#/components/schemas/field_definition'
                            - $ref: '#/components/schemas/text_field_definition'
                            - $ref: '#/components/schemas/number_field_definition'
                            - $ref: '#/components/schemas/date_field_definition'
                            - $ref: '#/components/schemas/list_field_definition'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /field/deal/{deal_id}/field_definition/{field_definition_id}:
    put:
      operationId: updateFieldByDealId
      summary: Updates the value of a field on a deal.
      tags:
        - Fields
      description: This endpoint updates a field that is associated with a deal and field definition. It returns a nested object. The outer object is `field_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single field object, and the `next_token` will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: field_definition_id
          description: The ID of the field definition.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The `edit_value` provides the new value that will be written into the field. The required formatting of the input depends on the associated field definition's `edit_type` value and other properties. Additionally, the optional param `derived_field_id` specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `multiple line`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 20000
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `single line`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 200
                      pattern: ^[^\n]*$
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `character`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 1
                      pattern: ^[^\s]*$
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `number`
                  properties:
                    edit_value:
                      type: number
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `date`
                  properties:
                    edit_value:
                      type: string
                      format: date
                      pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
                    derived_field_id:
                      type: integer
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `list` and field_definition.list_multiple_selection is `true`
                  properties:
                    edit_value:
                      type: array
                      items:
                        type: integer
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `list` and field_definition.list_multiple_selection is `false`
                  properties:
                    edit_value:
                      type: array
                      items:
                        type: integer
                      maxLength: 1
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
            examples:
              date:
                summary: 'edit_type: date'
                value:
                  edit_value: YYYY-MM-DD
                  derived_field_id: 1
              text:
                summary: 'edit_type: text'
                value:
                  edit_value: S
                  derived_field_id: 2
              number:
                summary: 'edit_type: number'
                value:
                  edit_value: 123
                  derived_field_id: 3
              list:
                summary: 'edit_type: list'
                value:
                  edit_value:
                    - 123
                  derived_field_id: 4
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  field_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteFieldById
      summary: Deletes the value of a field on a deal.
      tags:
        - Fields
      description: This endpoint returns a nested object. The outer object has one key `field_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains a single field object, and `next_token` will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: field_definition_id
          description: The ID of the field definition.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: derived_field_id
          description: Specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  field_delete:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /field/asset/{asset_id}/field_definition/{field_definition_id}:
    put:
      operationId: updateFieldByAssetId
      summary: Updates the value of a field on an asset.
      tags:
        - Fields
      description: This endpoint updates a field that is associated with an asset and field definition. It returns a nested object. The outer object is `field_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single field object, and the `next_token` will be null.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: field_definition_id
          description: The ID of the field definition.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The `edit_value` provides the new value that will be written into the field. The required formatting of the input depends on the associated field definition's `edit_type` value and other properties. Additionally, the optional param `derived_field_id` specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `multiple line`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 20000
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `single line`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 200
                      pattern: ^[^\n]*$
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `character`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 1
                      pattern: ^[^\s]*$
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `number`
                  properties:
                    edit_value:
                      type: number
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `date`
                  properties:
                    edit_value:
                      type: string
                      format: date
                      pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `list` and field_definition.list_multiple_selection is `true`
                  properties:
                    edit_value:
                      type: array
                      items:
                        type: integer
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `list` and field_definition.list_multiple_selection is `false`
                  properties:
                    edit_value:
                      type: array
                      items:
                        type: integer
                      maxLength: 1
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
            examples:
              date:
                summary: 'edit_type: date'
                value:
                  edit_value: YYYY-MM-DD
                  derived_field_id: 1
              text:
                summary: 'edit_type: text'
                value:
                  edit_value: S
                  derived_field_id: 2
              number:
                summary: 'edit_type: number'
                value:
                  edit_value: 123
                  derived_field_id: 3
              list:
                summary: 'edit_type: list'
                value:
                  edit_value:
                    - 123
                  derived_field_id: 4
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  field_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteFieldByAssetId
      summary: Deletes the value of a field on an asset.
      tags:
        - Fields
      description: This endpoint returns a nested object. The outer object has one key `field_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains a single field object, and `next_token` will be null.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: field_definition_id
          description: The ID of the field definition.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: derived_field_id
          description: Specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  field_delete:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /field/property/{property_id}/field_definition/{field_definition_id}:
    put:
      operationId: updateFieldByPropertyId
      summary: Updates the value of a field on a property.
      tags:
        - Fields
      description: This endpoint updates a field that is associated with a property and field definition. It returns a nested object. The outer object is `field_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single field object, and the `next_token` will be null.
      parameters:
        - in: path
          name: property_id
          description: The ID of the property.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: field_definition_id
          description: The ID of the field definition.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The `edit_value` provides the new value that will be written into the field. The required formatting of the input depends on the associated field definition's `edit_type` value and other properties. Additionally, the optional param `derived_field_id` specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `multiple line`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 20000
                    linked_entity_id:
                      type: integer
                      nullable: true
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `single line`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 200
                      pattern: ^[^\n]*$
                    linked_entity_id:
                      type: integer
                      nullable: true
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `character`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 1
                      pattern: ^[^\s]*$
                    linked_entity_id:
                      type: integer
                      nullable: true
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `number`
                  properties:
                    edit_value:
                      type: number
                    linked_entity_id:
                      type: integer
                      nullable: true
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `date`
                  properties:
                    edit_value:
                      type: string
                      format: date
                      pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
                    linked_entity_id:
                      type: integer
                      nullable: true
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `list` and field_definition.list_multiple_selection is `true`
                  properties:
                    edit_value:
                      type: array
                      items:
                        type: integer
                    linked_entity_id:
                      type: integer
                      nullable: true
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `list` and field_definition.list_multiple_selection is `false`
                  properties:
                    edit_value:
                      type: array
                      items:
                        type: integer
                      maxLength: 1
                    linked_entity_id:
                      type: integer
                      nullable: true
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
            examples:
              date:
                summary: 'edit_type: date'
                value:
                  edit_value: '2025-01-01'
                  linked_entity_id: null
                  derived_field_id: 1
              text:
                summary: 'edit_type: text'
                value:
                  edit_value: S
                  linked_entity_id: null
                  derived_field_id: 2
              number:
                summary: 'edit_type: number'
                value:
                  edit_value: 123
                  linked_entity_id: null
                  derived_field_id: 3
              list:
                summary: 'edit_type: list'
                value:
                  edit_value:
                    - 123
                  linked_entity_id: null
                  derived_field_id: 4
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  field_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/field_value_property'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteFieldByPropertyId
      summary: Deletes the value of a field on a property.
      tags:
        - Fields
      description: This endpoint returns a nested object. The outer object has one key `field_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains a single field object, and `next_token` will be null.
      parameters:
        - in: path
          name: property_id
          description: The ID of the property.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: field_definition_id
          description: The ID of the field definition.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: linked_entity_id
          description: The ID of the linked deal/asset associated to property field
          required: false
          schema:
            type: integer
        - in: query
          name: derived_field_id
          description: Specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  field_delete:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/field_value_property'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /field/loan/{loan_id}/field_definition/{field_definition_id}:
    put:
      operationId: updateFieldByLoanId
      summary: Updates the value of a field on a loan.
      tags:
        - Fields
      description: This endpoint updates a field that is associated with a loan and field definition. It returns a nested object. The outer object is `field_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single field object, and the `next_token` will be null.
      parameters:
        - in: path
          name: loan_id
          description: The ID of the loan.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: field_definition_id
          description: The ID of the field definition.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The `edit_value` provides the new value that will be written into the field. The required formatting of the input depends on the associated field definition's `edit_type` value and other properties. Additionally, the optional param `derived_field_id` specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `multiple line`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 20000
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `single line`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 200
                      pattern: ^[^\n]*$
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `text` and field_definition.text_mode is `character`
                  properties:
                    edit_value:
                      type: string
                      maxLength: 1
                      pattern: ^[^\s]*$
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `number`
                  properties:
                    edit_value:
                      type: number
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `date`
                  properties:
                    edit_value:
                      type: string
                      format: date
                      pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `list` and field_definition.list_multiple_selection is `true`
                  properties:
                    edit_value:
                      type: array
                      items:
                        type: integer
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
                - type: object
                  description: if field_definition.edit_type is `list` and field_definition.list_multiple_selection is `false`
                  properties:
                    edit_value:
                      type: array
                      items:
                        type: integer
                      maxLength: 1
                    derived_field_id:
                      type: integer
                      nullable: true
                  required:
                    - edit_value
            examples:
              date:
                summary: 'edit_type: date'
                value:
                  edit_value: YYYY-MM-DD
                  derived_field_id: 1
              text:
                summary: 'edit_type: text'
                value:
                  edit_value: S
                  derived_field_id: 2
              number:
                summary: 'edit_type: number'
                value:
                  edit_value: 123
                  derived_field_id: 3
              list:
                summary: 'edit_type: list'
                value:
                  edit_value:
                    - 123
                  derived_field_id: 4
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  field_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteFieldByLoanId
      summary: Deletes the value of a field on a loan.
      tags:
        - Fields
      description: This endpoint returns a nested object. The outer object has one key `field_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains a single field object, and `next_token` will be null.
      parameters:
        - in: path
          name: loan_id
          description: The ID of the loan.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: field_definition_id
          description: The ID of the field definition.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: derived_field_id
          description: Specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  field_delete:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/field_value_loan'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /fields/deal/{deal_id}:
    get:
      operationId: getFieldsById
      summary: Returns the fields associated with a given deal.
      tags:
        - Fields
      description: This endpoint returns a nested object. The outer object is fields and it contains two keys - data and next_token. The data object contains an array of field values. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal to which the requested fields are associated.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: field_definition_ids
          description: Restricts the response to only include fields that are associated with the user-specified set of field definitions.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: sparse
          description: Restricts the response to only include fields that are populated with a non-empty value.
          required: false
          schema:
            type: boolean
        - in: query
          name: demographic_fields
          description: Restricts the response to exclude demographic fields.
          required: false
          schema:
            type: boolean
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
        - in: query
          name: derived_field_id
          description: Specifies a derived field to reference.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A JSON blob with deal data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      operationId: updateFieldsByDealId
      summary: Updates the value of multiple fields on a deal.
      tags:
        - Fields
      description: This endpoint updates multiple fields that are associated with a deal and field definition. It returns a nested object. The outer object is `field_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single field object, and the `next_token` will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The `field_definition_id` specifies all of the fields to be edited, and `edit_value` provides the new values to be written into the fields. The required formatting of each `edit_value` depends on the associated field definition's `edit_type` value and other properties. Additionally, the optional param `derived_field_id` specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/bulk_field_edit'
                minimum: 1
                maximum: 100
            examples:
              date:
                summary: 'edit_type: date'
                value:
                  - field_definition_id: 1
                    edit_value: YYYY-MM-DD
                    derived_field_id: 1
              text:
                summary: 'edit_type: text'
                value:
                  - field_definition_id: 2
                    edit_value: S
                    derived_field_id: 2
              number:
                summary: 'edit_type: number'
                value:
                  - field_definition_id: 3
                    edit_value: 123
                    derived_field_id: 3
              list:
                summary: 'edit_type: list'
                value:
                  - field_definition_id: 4
                    edit_value:
                      - 123
                    derived_field_id: 4
              combined:
                summary: 'edit_type: date, text, number, list (combined)'
                value:
                  - field_definition_id: 1
                    edit_value: YYYY-MM-DD
                    derived_field_id: 1
                  - field_definition_id: 2
                    edit_value: S
                    derived_field_id: 2
                  - field_definition_id: 3
                    edit_value: 123
                    derived_field_id: 3
                  - field_definition_id: 4
                    edit_value:
                      - 123
                    derived_field_id: 4
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields_update:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deal_id:
                            type: integer
                            example: 1
                          asset_id:
                            type: integer
                            nullable: true
                            example: null
                          loan_id:
                            type: integer
                            nullable: true
                            example: null
                          property_id:
                            type: integer
                            nullable: true
                            example: null
                          field_definition_ids:
                            type: array
                            items:
                              type: integer
                            example:
                              - 1
                              - 2
                              - 3
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /fields/investment/{investment_id}:
    get:
      operationId: getFieldsByInvestmentId
      summary: Returns the fields associated with a given investment.
      tags:
        - Fields
      description: This endpoint returns a nested object. The outer object is fields and it contains two keys - data and next_token. The data object contains an array of field values. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: path
          name: investment_id
          description: The ID of the investment to which the requested fields are associated.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: field_definition_ids
          description: Restricts the response to only include fields that are associated with the user-specified set of field definitions.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: sparse
          description: Restricts the response to only include fields that are populated with a non-empty value.
          required: false
          schema:
            type: boolean
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
        - in: query
          name: derived_field_id
          description: Specifies a derived field to reference.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      operationId: updateFieldsByInvestmentId
      summary: Updates the value of multiple fields on an investment.
      tags:
        - Fields
      description: This endpoint updates multiple fields that are associated with an investment and field definition. It returns a nested object. The outer object is `field_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single field object, and the `next_token` will be null.
      parameters:
        - in: path
          name: investment_id
          description: The ID of the investment.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The `field_definition_id` specifies all of the fields to be edited, and `edit_value` provides the new values to be written into the fields. The required formatting of each `edit_value` depends on the associated field definition's `edit_type` value and other properties. Additionally, the optional param `derived_field_id` specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/bulk_field_edit'
                minimum: 1
                maximum: 100
            examples:
              date:
                summary: 'edit_type: date'
                value:
                  - field_definition_id: 1
                    edit_value: YYYY-MM-DD
                    derived_field_id: 1
              text:
                summary: 'edit_type: text'
                value:
                  - field_definition_id: 2
                    edit_value: S
                    derived_field_id: 2
              number:
                summary: 'edit_type: number'
                value:
                  - field_definition_id: 3
                    edit_value: 123
                    derived_field_id: 3
              list:
                summary: 'edit_type: list'
                value:
                  - field_definition_id: 4
                    edit_value:
                      - 123
                    derived_field_id: 4
              combined:
                summary: 'edit_type: date, text, number, list (combined)'
                value:
                  - field_definition_id: 1
                    edit_value: YYYY-MM-DD
                    derived_field_id: 1
                  - field_definition_id: 2
                    edit_value: S
                    derived_field_id: 2
                  - field_definition_id: 3
                    edit_value: 123
                    derived_field_id: 3
                  - field_definition_id: 4
                    edit_value:
                      - 123
                    derived_field_id: 4
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields_update:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deal_id:
                            type: integer
                            example: 1
                          asset_id:
                            type: integer
                            nullable: true
                            example: null
                          loan_id:
                            type: integer
                            nullable: true
                            example: null
                          property_id:
                            type: integer
                            nullable: true
                            example: null
                          field_definition_ids:
                            type: array
                            items:
                              type: integer
                            example:
                              - 1
                              - 2
                              - 3
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /fields/property/{property_id}:
    get:
      operationId: getFieldsByPropertyId
      summary: Returns the fields associated with a given property.
      tags:
        - Fields
      description: This endpoint returns a nested object. The outer object is fields and it contains two keys - data and next_token. The data object contains an array of field values. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: path
          name: property_id
          description: The ID of the property to which the requested fields are associated.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: field_definition_ids
          description: Restricts the response to only include fields that are associated with the user-specified set of field definitions.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: linked_entity_ids
          description: The IDs of any linked entities associated with the Property.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: sparse
          description: Restricts the response to only include fields that are populated with a non-empty value.
          required: false
          schema:
            type: boolean
        - in: query
          name: demographic_fields
          description: Restricts the response to exclude demographic fields.
          required: false
          schema:
            type: boolean
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
        - in: query
          name: derived_field_id
          description: Specifies a derived field to reference.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A JSON blob with property data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      operationId: updateFieldsByPropertyId
      summary: Updates the value of multiple fields on a property.
      tags:
        - Fields
      description: This endpoint updates multiple fields that are associated with a property and field definition. It returns a nested object. The outer object is `field_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single field object, and the `next_token` will be null.
      parameters:
        - in: path
          name: property_id
          description: The ID of the property.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The `field_definition_id` specifies all of the fields to be edited, and `edit_value` provides the new values to be written into the fields. The required formatting of each `edit_value` depends on the associated field definition's `edit_type` value and other properties. Additionally, the optional param `derived_field_id` specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/bulk_field_edit'
                minimum: 1
                maximum: 100
            examples:
              date:
                summary: 'edit_type: date'
                value:
                  - field_definition_id: 1
                    edit_value: YYYY-MM-DD
                    linked_entity_id: null
                    derived_field_id: 1
              text:
                summary: 'edit_type: text'
                value:
                  - field_definition_id: 2
                    edit_value: S
                    linked_entity_id: null
                    derived_field_id: 2
              number:
                summary: 'edit_type: number'
                value:
                  - field_definition_id: 3
                    edit_value: 123
                    linked_entity_id: null
                    derived_field_id: 3
              list:
                summary: 'edit_type: list'
                value:
                  - field_definition_id: 4
                    edit_value:
                      - 123
                    linked_entity_id: null
                    derived_field_id: 4
              combined:
                summary: 'edit_type: date, text, number, list (combined)'
                value:
                  - field_definition_id: 1
                    edit_value: YYYY-MM-DD
                    linked_entity_id: null
                    derived_field_id: 1
                  - field_definition_id: 2
                    edit_value: S
                    linked_entity_id: null
                    derived_field_id: 2
                  - field_definition_id: 3
                    edit_value: 123
                    linked_entity_id: null
                    derived_field_id: 3
                  - field_definition_id: 4
                    edit_value:
                      - 123
                    linked_entity_id: null
                    derived_field_id: 4
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields_update:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deal_id:
                            type: integer
                            nullable: true
                            example: null
                          asset_id:
                            type: integer
                            nullable: true
                            example: null
                          loan_id:
                            type: integer
                            nullable: true
                            example: null
                          property_id:
                            type: integer
                            example: 1
                          field_definition_ids:
                            type: array
                            items:
                              type: integer
                            example:
                              - 1
                              - 2
                              - 3
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /fields/asset/{asset_id}:
    get:
      operationId: getFieldsByAssetId
      summary: Returns the fields associated with a given asset.
      tags:
        - Fields
      description: This endpoint returns a nested object. The outer object is fields and it contains two keys - data and next_token. The data object contains an array of field values. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset to which the requested fields are associated.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: field_definition_ids
          description: Restricts the response to only include fields that are associated with the user-specified set of field definitions.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: sparse
          description: Restricts the response to only include fields that are populated with a non-empty value.
          required: false
          schema:
            type: boolean
        - in: query
          name: demographic_fields
          description: Restricts the response to exclude demographic fields.
          required: false
          schema:
            type: boolean
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
        - in: query
          name: derived_field_id
          description: Specifies a derived field to reference.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A JSON blob with asset data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      operationId: updateFieldsByAssetId
      summary: Updates the value of multiple fields on an asset.
      tags:
        - Fields
      description: This endpoint updates multiple fields that are associated with an asset and field definition. It returns a nested object. The outer object is `field_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single field object, and the `next_token` will be null.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The `field_definition_id` specifies all of the fields to be edited, and `edit_value` provides the new values to be written into the fields. The required formatting of each `edit_value` depends on the associated field definition's `edit_type` value and other properties. Additionally, the optional param `derived_field_id` specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/bulk_field_edit'
                minimum: 1
                maximum: 100
            examples:
              date:
                summary: 'edit_type: date'
                value:
                  - field_definition_id: 1
                    edit_value: YYYY-MM-DD
                    derived_field_id: 1
              text:
                summary: 'edit_type: text'
                value:
                  - field_definition_id: 2
                    edit_value: S
                    derived_field_id: 2
              number:
                summary: 'edit_type: number'
                value:
                  - field_definition_id: 3
                    edit_value: 123
                    derived_field_id: 3
              list:
                summary: 'edit_type: list'
                value:
                  - field_definition_id: 4
                    edit_value:
                      - 123
                    derived_field_id: 4
              combined:
                summary: 'edit_type: date, text, number, list (combined)'
                value:
                  - field_definition_id: 1
                    edit_value: YYYY-MM-DD
                    derived_field_id: 1
                  - field_definition_id: 2
                    edit_value: S
                    derived_field_id: 2
                  - field_definition_id: 3
                    edit_value: 123
                    derived_field_id: 3
                  - field_definition_id: 4
                    edit_value:
                      - 123
                    derived_field_id: 4
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields_update:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deal_id:
                            type: integer
                            nullable: true
                            example: null
                          asset_id:
                            type: integer
                            example: 1
                          loan_id:
                            type: integer
                            nullable: true
                            example: null
                          property_id:
                            type: integer
                            nullable: true
                            example: null
                          field_definition_ids:
                            type: array
                            items:
                              type: integer
                            example:
                              - 1
                              - 2
                              - 3
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /fields/loan/{loan_id}:
    get:
      operationId: getFieldsByLoanId
      summary: Returns the fields associated with a given loan.
      tags:
        - Fields
      description: This endpoint returns a nested object. The outer object is fields and it contains two keys - data and next_token. The data object contains an array of field values. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: path
          name: loan_id
          description: The ID of the loan to which the requested fields are associated.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: field_definition_ids
          description: Restricts the response to only include fields that are associated with the user-specified set of field definitions.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: sparse
          description: Restricts the response to only include fields that are populated with a non-empty value.
          required: false
          schema:
            type: boolean
        - in: query
          name: demographic_fields
          description: Restricts the response to exclude demographic fields.
          required: false
          schema:
            type: boolean
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
        - in: query
          name: derived_field_id
          description: Specifies a derived field to reference.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A JSON blob with loan data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      operationId: updateFieldsByLoanId
      summary: Updates the value of multiple fields on a loan.
      tags:
        - Fields
      description: This endpoint updates multiple fields that are associated with a loan and field definition. It returns a nested object. The outer object is `field_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single field object, and the `next_token` will be null.
      parameters:
        - in: path
          name: loan_id
          description: The ID of the loan.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: The `field_definition_id` specifies all of the fields to be edited, and `edit_value` provides the new values to be written into the fields. The required formatting of each `edit_value` depends on the associated field definition's `edit_type` value and other properties. Additionally, the optional param `derived_field_id` specifies a derived field to reference. If there are multiple valid derived fields on the target field definition, and a valid `derived_field_id` is not provided, the action may fail.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/bulk_field_edit'
                minimum: 1
                maximum: 100
            examples:
              date:
                summary: 'edit_type: date'
                value:
                  - field_definition_id: 1
                    edit_value: YYYY-MM-DD
                    derived_field_id: 1
              text:
                summary: 'edit_type: text'
                value:
                  - field_definition_id: 2
                    edit_value: S
                    derived_field_id: 2
              number:
                summary: 'edit_type: number'
                value:
                  - field_definition_id: 3
                    edit_value: 123
                    derived_field_id: 3
              list:
                summary: 'edit_type: list'
                value:
                  - field_definition_id: 4
                    edit_value:
                      - 123
                    derived_field_id: 4
              combined:
                summary: 'edit_type: date, text, number, list (combined)'
                value:
                  - field_definition_id: 1
                    edit_value: YYYY-MM-DD
                    derived_field_id: 1
                  - field_definition_id: 2
                    edit_value: S
                    derived_field_id: 2
                  - field_definition_id: 3
                    edit_value: 123
                    derived_field_id: 3
                  - field_definition_id: 4
                    edit_value:
                      - 123
                    derived_field_id: 4
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields_update:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deal_id:
                            type: integer
                            nullable: true
                            example: null
                          asset_id:
                            type: integer
                            nullable: true
                            example: null
                          loan_id:
                            type: integer
                            example: 1
                          property_id:
                            type: integer
                            nullable: true
                            example: null
                          field_definition_ids:
                            type: array
                            items:
                              type: integer
                            example:
                              - 1
                              - 2
                              - 3
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /fields/field_definition/{field_definition_id}:
    get:
      operationId: getFieldsByFieldDefinitionId
      summary: Returns the field values and metadata for fields.
      tags:
        - Fields
      description: This endpoint returns a nested object. The outer object is fields and it contains two keys - data and next_token. The data object contains an array of field values. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: path
          name: field_definition_id
          description: The ID of the field definition to which the requested fields are associated.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: sparse
          description: 'Restricts the response to only include fields that are populated with a non-empty value. Note: this parameter can be combined with either the deal_ids or property_ids parameter to further restrict the response to certain deals or properties.'
          required: false
          schema:
            type: boolean
        - in: query
          name: deal_ids
          description: 'Restricts the response to only include fields that are associated with the user-specified set of deals. Note: this parameter is mutually exclusive with the property_ids parameter. Providing both parameters will return no results.'
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: property_ids
          description: 'Restricts the response to only include fields that are associated with the user-specified set of properties. Note: this parameter is mutually exclusive with the deal_ids parameter. Providing both parameters will return no results.'
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: investment_ids
          description: 'Restricts the response to only include fields that are associated with the user-specified set of investments. Note: this parameter is mutually exclusive with the deal_ids parameter. Providing both parameters will return no results.'
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
        - in: query
          name: derived_field_id
          description: Specifies a derived field to reference.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A JSON blob with field data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  fields:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/field_value'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /workflow/deal/{deal_id}:
    put:
      operationId: updateDealWorkflow
      summary: Updates a deal's status.
      tags:
        - Workflow
      description: This endpoint returns a nested object. The outer object has one key `workflow_update` that is an object that contains two keys - `data` and `next_token`. The data object contains the IDs of the deal and deal status that were updated, and the `next_token` will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of a deal.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        description: This specifies the new deal status value that will be written into the deal's status field
        content:
          application/json:
            schema:
              type: object
              properties:
                deal_status_list_option_id:
                  type: integer
                  minimum: 1
                  example: 2
      responses:
        '200':
          description: A JSON blob with the id of the deal and the id of status that was updated.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  workflow_update:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deal_id:
                            type: integer
                            example: 1
                          deal_status_list_option_id:
                            type: integer
                            example: 2
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /roles/deal/{deal_id}:
    get:
      operationId: getRoleByDealId
      summary: Returns a role associated to a deal.
      tags:
        - Roles
      description: This endpoint returns a nested object. The outer object is roles and contains two keys - data and next_token. The data object contains an array of role objects. The next_token will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of a deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: role_definition_ids
          description: Restricts the response to only include user-specified roles.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
      responses:
        '200':
          description: A JSON blob with role data
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  roles:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          name:
                            type: string
                          deal_id:
                            type: integer
                          asset_id:
                            type: integer
                            example: null
                            nullable: true
                          assignee_person_id:
                            type: integer
                          access_person_ids:
                            type: array
                            items:
                              type: integer
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /role/deal/{deal_id}/role_definition/{role_definition_id}:
    put:
      operationId: updateRoleByDealId
      summary: Updates a role assignee and returns the role.
      tags:
        - Roles
      description: This endpoint returns a nested object. The outer object is roles and contains two keys - data and next_token. The data object contains a name, deal_id, asset_id, assignee_person_ids, access_person_id. The next_token will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of a deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: role_definition_id
          description: The ID of a role.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON blob with role data
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  roles:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          name:
                            type: string
                          deal_id:
                            type: integer
                          asset_id:
                            type: integer
                            example: null
                            nullable: true
                          assignee_person_id:
                            type: integer
                          access_person_ids:
                            type: array
                            items:
                              type: integer
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /roles/asset/{asset_id}:
    get:
      operationId: getRoleByAssetId
      summary: Returns a role associated to an asset.
      tags:
        - Roles
      description: This endpoint returns a nested object. The outer object is roles and contains two keys - data and next_token. The data object contains an array of role objects. The next_token will be null.
      parameters:
        - in: path
          name: asset_id
          description: The ID of an asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: role_definition_ids
          description: Restricts the response to only include user-specified roles.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
      responses:
        '200':
          description: A JSON blob with role data
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  roles:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          name:
                            type: string
                          deal_id:
                            type: integer
                            example: null
                            nullable: true
                          asset_id:
                            type: integer
                          assignee_person_id:
                            type: integer
                          access_person_ids:
                            type: array
                            items:
                              type: integer
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /role/asset/{asset_id}/role_definition/{role_definition_id}:
    put:
      operationId: updateRoleByAssetId
      summary: Updates a role assignee and returns the role.
      tags:
        - Roles
      description: This endpoint returns a nested object. The outer object is roles and contains two keys - data and next_token. The data object contains a name, deal_id, asset_id, assignee_person_ids, access_person_id. The next_token will be null.
      parameters:
        - in: path
          name: asset_id
          description: The ID of an asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: path
          name: role_definition_id
          description: The ID of a role.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON blob with role data
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  roles:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          name:
                            type: string
                          deal_id:
                            type: integer
                            example: null
                            nullable: true
                          asset_id:
                            type: integer
                          assignee_person_id:
                            type: integer
                          access_person_ids:
                            type: array
                            items:
                              type: integer
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /search:
    get:
      operationId: search
      summary: Returns a list of assets, deals, and/or properties with matching names/addresses.
      tags:
        - Search
      description: This endpoint returns a nested object. The outer object has multiple keys `assets`, `loans`, `deals`, `investments`, and `properties` all of which are objects and can have up to 100 results. The assets/deals/properties object contains a single data object, which contains an array of the result asset/deal/property objects.
      parameters:
        - in: query
          name: query
          description: The value to search for.
          required: true
          schema:
            type: string
        - in: query
          name: record_type
          description: The record type of the value to limit the search for. (i.e asset/deal/loans/property)
          required: false
          schema:
            type: string
        - in: query
          name: num_results
          description: Number of records for each record type to return. Default is 100.
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: A JSON array of assets, deals, loans, & properties.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  deals:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/deal'
                  properties:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/property'
                  assets:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/asset'
                  loans:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/loan'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /files/deal/{deal_id}:
    get:
      operationId: getFilesByDealId
      summary: Returns a paginated list of files belonging to a deal.
      tags:
        - Files
      description: This endpoint returns a nested object. The outer object is files and contains two keys - data and next_token. The data object contains an array of files - each with a file id and name. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: parent_folder_ids
          description: Restricts the response to only include files that are associated with the user-specified parent folders.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: file_tag_definition_ids
          description: Restricts the response to only include files that are associated with the user-specified file tags.
          required: false
          schema:
            type: array
            items:
              type: integer
        - in: query
          name: updated_before
          description: Restricts the response to only include files that have a last updated value before the given timestamp(s).
          required: false
          schema:
            type: integer
        - in: query
          name: updated_after
          description: Restricts the response to only include files that have a last updated value after the given timestamp(s).
          required: false
          schema:
            type: integer
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of files
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  files:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/file'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /files/asset/{asset_id}:
    get:
      operationId: getFilesByAssetId
      summary: Returns a paginated list of files belonging to an asset.
      tags:
        - Files
      description: This endpoint returns a nested object. The outer object is files and contains two keys - data and next_token. The data object contains an array of files - each with a file id and name. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: parent_folder_ids
          description: Restricts the response to only include files that are associated with the user-specified parent folders.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: file_tag_definition_ids
          description: Restricts the response to only include files that are associated with the user-specified file tags.
          required: false
          schema:
            type: array
            items:
              type: integer
        - in: query
          name: updated_before
          description: Restricts the response to only include files that have a last updated value before the given timestamp(s).
          required: false
          schema:
            type: integer
        - in: query
          name: updated_after
          description: Restricts the response to only include files that have a last updated value after the given timestamp(s).
          required: false
          schema:
            type: integer
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of files
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  files:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/file'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /file/deal/{deal_id}:
    post:
      operationId: createFileByDealId
      summary: Creates a file on a deal with the given id.
      tags:
        - Files
      description: This endpoint creates a file. It returns a nested object. The outer object is `file_create` and it contains two keys - `data` and `next_token`. The `data` object contains a single file object, and the `next_token` will be null. This request must be sent to `https://files.dealpath.com`.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: name
          description: This parameter contains the name of the file being uploaded.
          required: true
          schema:
            type: string
        - in: query
          name: parent_folder_id
          description: This parameter will cause the uploaded file to be placed into this folder specified by ID.
          required: true
          schema:
            type: integer
        - in: query
          name: file_tag_definition_ids
          description: This parameter will add the specified file tag(s) to the file being uploaded.  (Required if file tagging is enforced)
          required: false
          schema:
            type: array
            items:
              type: integer
      requestBody:
        description: The body is the file content. The `Content-Type` request header should contain the appropriate mime type.
        content:
          application/json:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: A JSON blob with file data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  folder_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/file'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /file/asset/{asset_id}:
    post:
      operationId: createFileByAssetId
      summary: Creates a file on an asset with the given id.
      tags:
        - Files
      description: This endpoint creates a file. It returns a nested object. The outer object is `file_create` and it contains two keys - `data` and `next_token`. The `data` object contains a single file object, and the `next_token` will be null. This request must be sent to `https://files.dealpath.com`.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: name
          description: This parameter contains the name of the file being uploaded.
          required: true
          schema:
            type: string
        - in: query
          name: parent_folder_id
          description: This parameter will cause the uploaded file to be placed into this folder specified by ID.
          required: true
          schema:
            type: integer
        - in: query
          name: file_tag_definition_ids
          description: This parameter will add the specified file tag(s) to the file being uploaded.  (Required if file tagging is enforced)
          required: false
          schema:
            type: array
            items:
              type: integer
      requestBody:
        description: The body is the file content. The `Content-Type` request header should contain the appropriate mime type.
        content:
          application/json:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: A JSON blob with file data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  folder_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/file'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /file/{file_id}:
    get:
      operationId: getFileById
      summary: Gets the contents of a file with the given id.
      tags:
        - Files
      description: This endpoint returns the raw binary data of a file. This request must be sent to `https://files.dealpath.com`.
      parameters:
        - in: path
          name: file_id
          description: The ID of the file.
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: The response is the file content.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      operationId: updateFileById
      summary: Updates a file with the given id.
      tags:
        - Files
      description: This endpoint updates a file. It returns a nested object. The outer object is `file_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single file object, and the `next_token` will be null.
      parameters:
        - in: path
          name: file_id
          description: The ID of the file.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: This specifies the new name, location, and/or file tag(s) for the file.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: This will be the new name of the file.
                  maxLength: 64
                  example: my_file
                parent_folder_id:
                  type: integer
                  description: The new parent folder must be under the same entity as the original parent folder of the file.
                file_tag_definition_ids:
                  type: array
                  items:
                    type: integer
                  description: The new file tags that will be attached to the file.
      responses:
        '200':
          description: A JSON blob with file data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  file_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/file'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteFileById
      summary: Deletes a file with the given id.
      tags:
        - Files
      description: This endpoint returns a nested object. The outer object has one key `file_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains a single file object, and `next_token` will be null.
      parameters:
        - in: path
          name: file_id
          description: The ID of the file.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified file will actually be deleted.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON blob with file data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  file_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /file_tag_definitions:
    get:
      operationId: getFileTagDefinitions
      summary: Returns a paginated list of file tags.
      tags:
        - Files
      description: This endpoint returns a nested object. The outer object is file tag definitions and contains two properties - data and next_token. The data object contains an array of file tags, and the next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of file tag definitions
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  file_tag_definitions:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/file_tag_definition'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /folders/deal/{deal_id}:
    get:
      operationId: getFoldersByDealId
      summary: Returns a paginated list of folders belonging to a deal.
      tags:
        - Folders
      description: This endpoint returns a nested object. The outer object is folders and contains two keys - data and next_token. The data object contains an array of folders - each with a folder id and name. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: folder_ids
          description: Restricts the response to only include folders with specified folder ids.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: parent_folder_ids
          description: Restricts the response to only include folders with specified parent folder ids.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: file_tag_definition_ids
          description: Restricts the response to only include folders with specified file tag definition ids.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of folders
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  folders:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/folder'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /folders/asset/{asset_id}:
    get:
      operationId: getFoldersByAssetId
      summary: Returns a paginated list of folders belonging to an asset.
      tags:
        - Folders
      description: This endpoint returns a nested object. The outer object is folders and contains two keys - data and next_token. The data object contains an array of folders - each with a folder id and name. The next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: folder_ids
          description: Restricts the response to only include folders with specified folder ids.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: parent_folder_ids
          description: Restricts the response to only include folders with specified parent folder ids.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: file_tag_definition_ids
          description: Restricts the response to only include folders with specified file tag definition ids.
          required: false
          schema:
            type: array
            items:
              type: integer
              minItems: 1
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of folders
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  folders:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/folder'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /folder/deal/{deal_id}:
    post:
      operationId: createFolderByDealId
      summary: Creates a folder on a deal with the given id.
      tags:
        - Folders
      description: This endpoint creates a folder. It returns a nested object. The outer object is `folder_create` and it contains two keys - `data` and `next_token`. The `data` object contains a single folder object, and the `next_token` will be null.
      parameters:
        - in: path
          name: deal_id
          description: The ID of the deal.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: This specifies the new name and location for the folder.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: This will be the name of the newly created folder.
                  maxLength: 64
                  example: My Folder
                parent_folder_id:
                  type: integer
                  description: This will be the parent folder of the new folder. If null, this will create a folder in the record’s root directory.
              required:
                - name
      responses:
        '200':
          description: A JSON blob with folder data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  folder_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/folder'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /folder/asset/{asset_id}:
    post:
      operationId: createFolderByAssetId
      summary: Creates a folder on a asset with the given id.
      tags:
        - Folders
      description: This endpoint creates a folder. It returns a nested object. The outer object is `folder_create` and it contains two keys - `data` and `next_token`. The `data` object contains a single folder object, and the `next_token` will be null.
      parameters:
        - in: path
          name: asset_id
          description: The ID of the asset.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: This specifies the new name and location for the folder.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: This will be the name of the newly created folder.
                  maxLength: 64
                  example: My Folder
                parent_folder_id:
                  type: integer
                  description: This will be the parent folder of the new folder. If null, this will create a folder in the record’s root directory.
              required:
                - name
      responses:
        '200':
          description: A JSON blob with folder data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  folder_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/folder'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /folder/{folder_id}:
    put:
      operationId: updateFolderById
      summary: Updates a folder with the given id.
      tags:
        - Folders
      description: This endpoint updates a folder. It returns a nested object. The outer object is `folder_update` and it contains two keys - `data` and `next_token`. The `data` object contains a single folder object, and the `next_token` will be null.
      parameters:
        - in: path
          name: folder_id
          description: The ID of the folder.
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        description: This specifies the new name and location for the folder.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: This will be the new name of the folder.
                  maxLength: 64
                  example: My Folder
                parent_folder_id:
                  type: integer
                  description: This should return an error if the Folder ID value specified is on a different entity.
      responses:
        '200':
          description: A JSON blob with folder data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  folder_update:
                    type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/folder'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteFolderById
      summary: Deletes a folder with the given id.
      tags:
        - Folders
      description: This endpoint returns a nested object. The outer object has one key `folder_delete` that is an object that contains two keys - `data` and `next_token`. The data object contains a single folder object, and `next_token` will be null.
      parameters:
        - in: path
          name: folder_id
          description: The ID of the folder.
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: confirm
          description: Confirms acknowledgement that the specified folder will actually be deleted. Folders can only be deleted if there are no files within the folder or any subfolders.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON blob with folder data.
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  folder_delete:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                      next_token:
                        type: string
                        nullable: true
                        example: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /people:
    get:
      operationId: getPeople
      summary: Returns a paginated list of people.
      tags:
        - People
      description: This endpoint returns a nested object. The outer object is people and contains two keys - data and next_token. The data object contains an array of people objects, and the next_token contains a string for fetching the next page of data, or null if all of the data has already been fetched.
      parameters:
        - in: query
          name: next_token
          description: If the next token in the response is non-null, then there are more pages of data that can be fetched. The token from the previous response must be passed in as a query param with the next request.
          required: false
          schema:
            type: string
        - in: query
          name: is_member
          description: Specify filtering on the returned people to be member only or contacts only. If value is true, return only member-type People. If value is false, return only contact-type People.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A JSON array of people
          content:
            application/vnd.dealpath.api.v1+json:
              schema:
                type: object
                properties:
                  people:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/person'
                      next_token:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  schemas:
    asset:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        property_ids:
          type: array
          items:
            type: integer
        loan_ids:
          type: array
          items:
            type: integer
        asset_type:
          type: string
        asset_status:
          type: string
        last_updated:
          type: string
          format: date-time
        origin_deal_id:
          type: integer
      required:
        - id
        - name
        - property_ids
        - asset_status
    deal:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        property_ids:
          type: array
          items:
            type: integer
        loan_ids:
          type: array
          items:
            type: integer
        investment_ids:
          type: array
          items:
            type: integer
        deal_type:
          type: string
        deal_state:
          type: string
        last_updated:
          type: string
          format: date-time
      required:
        - id
        - name
        - property_ids
        - deal_state
    investment:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        deal_ids:
          type: array
          items:
            type: integer
        asset_ids:
          type: array
          items:
            type: integer
        investment_type:
          type: string
        investment_state:
          type: string
        last_updated:
          type: string
          format: date-time
      required:
        - id
        - name
    address:
      type: object
      properties:
        address_1:
          type: string
        address_2:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        country:
          type: string
        lat:
          type: string
        lng:
          type: string
    property:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        deal_ids:
          type: array
          items:
            type: integer
        asset_ids:
          type: array
          items:
            type: integer
        loan_ids:
          type: array
          items:
            type: integer
        last_updated:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/address'
      required:
        - id
        - name
        - deal_ids
    list_option:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
        field_definition_id:
          type: integer
          example: 2
        disabled:
          type: boolean
          example: false
        person_id:
          type: integer
          example: null
          nullable: true
      required:
        - id
        - name
        - field_definition_id
        - disabled
    loan:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        loan_type:
          type: string
        loan_status:
          type: string
        deal_id:
          type: integer
        asset_id:
          type: integer
        property_ids:
          type: array
          items:
            type: integer
        last_updated:
          type: string
          format: date-time
      required:
        - id
        - name
        - loan_type
        - loan_status
    lease:
      type: object
      properties:
        id:
          type: integer
        tenant_name:
          type: string
        property_id:
          type: integer
        begin_date:
          type: string
          format: date-time
        suite_id:
          type: string
        leased_area:
          type: integer
      required:
        - id
        - tenant_name
        - property_id
    field_definition:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: My Field
        applicable_record_type:
          type: array
          items:
            type: string
          example:
            - deal
        is_linked:
          type: boolean
          example: false
        can_edit_values:
          type: boolean
          example: false
        role_definition_id:
          type: integer
          example: null
        derived_fields:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: My Field
              entity_type:
                type: string
                example: Deal
              field_definition_id:
                type: integer
              field_type:
                type: string
                example: primary
              aggregation_type:
                type: string
                example: manual_entry
              allocation_type:
                type: string
                example: manual_entry
      required:
        - id
        - name
        - can_edit_values
        - is_linked
    text_field_definition:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: My Text Field
        applicable_record_type:
          type: array
          items:
            type: string
          example:
            - deal
        is_linked:
          type: boolean
          example: false
        can_edit_values:
          type: boolean
          example: true
        edit_type:
          type: string
          example: text
        default_value:
          type: string
          example: default text
        text_mode:
          type: string
          enum:
            - single line
            - multiple line
            - character
        derived_fields:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 2
              name:
                type: string
                example: My Text Field
              entity_type:
                type: string
                example: Deal
              field_definition_id:
                type: integer
              field_type:
                type: string
                example: primary
              aggregation_type:
                type: string
                example: manual_entry
              allocation_type:
                type: string
                example: manual_entry
      required:
        - id
        - name
        - can_edit_values
        - is_linked
        - edit_type
        - text_mode
    number_field_definition:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: My Number Field
        applicable_record_type:
          type: array
          items:
            type: string
          example:
            - deal
        is_linked:
          type: boolean
          example: false
        can_edit_values:
          type: boolean
          example: true
        edit_type:
          type: string
          example: number
        default_value:
          type: number
          example: 3.141592
        derived_fields:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 3
              name:
                type: string
                example: My Number Field
              entity_type:
                type: string
                example: Deal
              field_definition_id:
                type: integer
              field_type:
                type: string
                example: primary
              aggregation_type:
                type: string
                example: manual_entry
              allocation_type:
                type: string
                example: manual_entry
      required:
        - id
        - name
        - can_edit_values
        - is_linked
        - edit_type
    date_field_definition:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: My Date Field
        applicable_record_type:
          type: array
          items:
            type: string
          example:
            - deal
        is_linked:
          type: boolean
          example: false
        can_edit_values:
          type: boolean
          example: true
        edit_type:
          type: string
          example: date
        default_value:
          type: string
          example: '1991-08-25'
        date_mode:
          type: string
          enum:
            - year month day
            - month day
            - year
        derived_fields:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 4
              name:
                type: string
                example: My Date Field
              entity_type:
                type: string
                example: Deal
              field_definition_id:
                type: integer
              field_type:
                type: string
                example: primary
              aggregation_type:
                type: string
                example: manual_entry
              allocation_type:
                type: string
                example: manual_entry
      required:
        - id
        - name
        - is_linked
        - can_edit_values
        - edit_type
        - date_mode
    list_field_definition:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: My List Field
        applicable_record_type:
          type: array
          items:
            type: string
          example:
            - deal
        is_linked:
          type: boolean
          example: false
        can_edit_values:
          type: boolean
          example: true
        edit_type:
          type: string
          example: list
        default_value:
          type: array
          items:
            type: integer
          example:
            - 1
            - 2
            - 3
        list_mode:
          type: string
        list_multiple_selection:
          type: boolean
        derived_fields:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 5
              name:
                type: string
                example: My List Field
              entity_type:
                type: string
                example: Deal
              field_definition_id:
                type: integer
              field_type:
                type: string
                example: primary
              aggregation_type:
                type: string
                example: manual_entry
              allocation_type:
                type: string
                example: manual_entry
      required:
        - id
        - name
        - is_linked
        - can_edit_values
        - edit_type
        - list_multiple_selection
        - list_mode
    field_value:
      type: object
      properties:
        field_definition_id:
          type: integer
          example: 1
        derived_field_id:
          type: integer
          example: 1
        name:
          type: string
          example: My Field
        deal_id:
          type: integer
          example: 1
          nullable: true
        asset_id:
          type: integer
          example: null
          nullable: true
        property_id:
          type: integer
          example: null
          nullable: true
        loan_id:
          type: integer
          example: null
          nullable: true
        investment_id:
          type: integer
          example: null
          nullable: true
        value:
          type: string
          example: My Value
        edit_value:
          oneOf:
            - type: integer
            - type: string
            - type: array
              items:
                type: integer
          example: My Edit Value
        html_value:
          type: string
          example: null
      required:
        - field_definition_id
        - deal_id
        - asset_id
        - property_id
        - loan_id
        - name
        - value
    field_value_property:
      type: object
      properties:
        field_definition_id:
          type: integer
          example: 1
        derived_field_id:
          type: integer
          example: 1
        name:
          type: string
          example: My Field
        deal_id:
          type: integer
          example: null
          nullable: true
        asset_id:
          type: integer
          example: null
          nullable: true
        property_id:
          type: integer
          example: 1
          nullable: true
        loan_id:
          type: integer
          example: null
          nullable: true
        value:
          type: string
          example: My Value
        edit_value:
          oneOf:
            - type: integer
            - type: string
            - type: array
              items:
                type: integer
          example: My Edit Value
        html_value:
          type: string
          example: null
        linked_entity_id:
          type: integer
          example: null
          nullable: true
        linked_entity_type:
          type: integer
          example: null
          nullable: true
      required:
        - field_definition_id
        - deal_id
        - asset_id
        - property_id
        - loan_id
        - name
        - value
    field_value_loan:
      type: object
      properties:
        field_definition_id:
          type: integer
          example: 1
        derived_field_id:
          type: integer
          example: 1
        name:
          type: string
          example: My Field
        deal_id:
          type: integer
          example: null
          nullable: true
        asset_id:
          type: integer
          example: null
          nullable: true
        property_id:
          type: integer
          example: null
          nullable: true
        loan_id:
          type: integer
          example: 1
          nullable: true
        value:
          type: string
          example: My Value
        edit_value:
          oneOf:
            - type: integer
            - type: string
            - type: array
              items:
                type: integer
          example: My Edit Value
        html_value:
          type: string
          example: null
      required:
        - field_definition_id
        - deal_id
        - asset_id
        - property_id
        - loan_id
        - name
        - value
    bulk_field_edit:
      type: object
      properties:
        field_definition_id:
          type: integer
          minimum: 1
        edit_value:
          oneOf:
            - type: integer
            - type: string
            - type: array
              items:
                type: integer
        linked_entity_id:
          type: integer
          nullable: true
        derived_field_id:
          type: integer
          example: 1
    file:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: my_file.png
        creator_person_id:
          type: integer
        deal_id:
          type: integer
        asset_id:
          type: integer
        parent_folder_id:
          type: integer
          nullable: true
        parent_folder_name:
          type: string
          nullable: true
          example: My Folder
        file_type:
          type: string
          example: application/pdf
        file_size:
          type: integer
        created_at:
          type: string
        last_updated:
          type: string
        attached_tasks:
          type: array
          items:
            type: string
        access_person_ids:
          type: array
          items:
            type: integer
        file_tag_definition_ids:
          type: array
          items:
            type: integer
    file_tag_definition:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    folder:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: My Folder
        parent_folder_id:
          type: integer
          nullable: true
        deal_id:
          type: integer
          nullable: true
        asset_id:
          type: integer
          nullable: true
        access_person_ids:
          type: array
          items:
            type: integer
        file_tag_definition_ids:
          type: array
          items:
            type: integer
    person:
      type: object
      properties:
        id:
          type: integer
        default_roles:
          type: array
          items:
            type: string
        last_login:
          type: string
        team_membership_level:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        company:
          type: string
        title:
          type: string
        email:
          type: string
        phone_number:
          type: string
        address_1:
          type: string
        address_2:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        country:
          type: string
        tags:
          type: array
          items:
            type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid.
      content:
        application/json:
          example:
            message: Invalid authorization token.
    NotFoundError:
      description: The requested resource was not found.
      content:
        application/json:
          example:
            message: Resource not found.
